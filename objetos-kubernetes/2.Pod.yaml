
---
kind:                 Pod
apiVersion:           v1

metadata:
  name:               mariadb

spec:
  initContainers:
    - name:             init-mariadb
      image:            mariadb:11.7
      command:          ["sh", "-c", "echo 'Hola Mundo' > /tmp/datos2/hola.txt"]
      volumeMounts:
        - name:         datos-temporales-compartidos
          mountPath:    /tmp/datos2
  containers:
    - name:             mariadb
      image:            mariadb:11.7
      imagePullPolicy:  IfNotPresent     # Always, Never
                        # Always: Siempre intenta descargar la imagen antes de crear el contenedor.. aunque en la máquina ya exista esa imagen.
                        # Hay que tener cuidao... Kubernetes no es docker.
                        # Si monto esto en prod... y quiero 5 replicas.. y el kubernetes las empieza a mover de un sitio para otro...
                        # Y así con otros proyectos en el cluster
                        # Cuantas peticiones voy a estar lanzando al registry de imagenes? Montonones.
                        # No continuamente... pero quizás si en picos.
                        # Y los registries públicos capan. Y nos cortan por horas el grifo.
      resources:      # Limitaciones de recursos de cpu y ram para el contenedor
        requests:     # Pido esto para arrancar
          cpu:        100m
          memory:     128Mi
        limits:       # No quiero que pase de esto
          cpu:        500m
          memory:     128Mi
      env:
        - name:         MARIADB_ROOT_PASSWORD
          valueFrom:  
            secretKeyRef:
              name:     datos-secretos-mariadb
              key:      password-root
        - name:         MARIADB_PASSWORD
          valueFrom:
            secretKeyRef:
              name:     datos-secretos-mariadb
              key:      password
        - name:         MARIADB_USER
          valueFrom:
            configMapKeyRef:
              name:     datos-mariadb
              key:      usuario
        - name:         MARIADB_DATABASE
          valueFrom:
            configMapKeyRef:
              name:     datos-mariadb
              key:      nombre_bbdd
      volumeMounts:
        - name:         datos-bbdd
          mountPath:    /var/lib/mysql
        - name:         configuracion-bbdd
          mountPath:    /etc/mysql
        - name:         datos-temporales-compartidos
          mountPath:    /tmp/datos
      # En el caso de Kubernetes, también podemos poner los puertos
      # Pero este bloque puertos no tiene nada que ver con el bloque ports de docker-compose
      ports: # En este caso, el bloque ports es meramente informativo
        - name:           mariadb
          containerPort:  3306
          protocol:       TCP
      # El no poner este bloque NO AFECTARIA A NADA!
  # Los volumenes de Kubernetes se definen a nivel del POD...
  # Pero se usan a nivel de contenedor!
  volumes:
    #- name:           configuracion-bbdd
    #  configMap:
    #    name:         configuracion_bbdd
    - name:           datos-temporales-compartidos
      emptyDir: {}
    - name:           datos-bbdd
      persistentVolumeClaim:
        claimName:    peticion-volumen-bbdd
      #nfs:
      #  server: nfs-server.miempresa.com
      #  path: "/mariadb/wp/desa"
      #iscsi:
      #  targetPortal: 10.0.2.15:3260
      #  portals: ['10.0.2.16:3260', '10.0.2.17:3260']
      #  iqn: iqn.2001-04.com.example:storage.kube.sys1.xyz
      #  lun: 0
      #  fsType: ext4
      #  readOnly: true
      #tipoDeVolumen:
        # En base al tipo de volumen, tendré que dar una determinada configuración
        # - Volumen local a nivel del HDD del host: Necesitaré dar ruta del host
        # - Volumen en una cabina por fibra: Identificar a la cabina + LUN
        # - Volumen en AWS: ID de cuenta de AWS, ID de la región, ID del volumen
        # - Volumen nfs: IP del servidor nfs, ruta del recurso nfs

# Pregunta: Para qué sirven los volúmenes????
# - Persistir información tras la eliminación de un contenedor/pod
#     Para persistir datos, kubernetes trae un montón de tipos de volumenes
#     Además, los fabricantes de cabinas / clouds, me dan plugins que puedo instalar en un cluster de kubernetes 
#     para tener nuevos tipos de volumenes específicos de ese fabricante
#     El problema es que en estos caso, la información que es necesario suministrar para montar el volumen
#     no la tiene el desarrollador... la tiene el administrador de sistemas.
#     Por ello, kubernetes define otros 2 tipos de objeto adicionales: PersistentVolume y PersistentVolumeClaim
# - Compartir datos no persistentes entre contenedores:
#     emptyDir: Monta un volumen en el host.... vacío.... en algún sitio.. no sé donde.. ni me interesa.
#     Por defecto se crea en hdd (en el filesystem) del host              emptyDir: {}
#     Puedo solicitar que se cree en RAM                                  emptyDir: {medium: Memory}     
# - Inyectar archivos/carpetas (configuraciones) a un contenedor
#     En este caso, tenemos 2 tipos de volúmenes que podemos usar: ConfigMap y Secret
#     configMap:
#       name: nombre-del-configmap
#       En este caso, se crean en la carpeta donde se monte posteriormente el volumen,
#       tantos ficheros como claves tiene el configmap... y dentro de los ficheros me encuentro el valor del configmap
#       En nuestro caso nos crearía un fichero llamado "usuario" y dentro de ese fichero tendría el valor "usuario"
#       Y además un segundo fichero llamado "nombre_bbdd" y dentro de ese fichero tendría el valor "bd"
#     Si ese archivo contiene información sensible (clave ssh, certificado, clave privada...) usaré un secret
# Kubernetes nos ofrece diferentes tipos de volúmenes en base al caso de uso/necesidad